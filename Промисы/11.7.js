
// Обработчики промисов .then(), .catch(), и .finally() всегда выполняются асинхронно.
// Это означает, что даже если промис уже завершён (разрешён или отклонён), 
// обработчики не будут вызваны сразу — они будут добавлены в очередь микрозадач 
// и выполнятся после того, как текущий код завершится.


// Асинхронность промисов:
// Когда вы добавляете обработчики через .then(), .catch(), или .finally(),
// они не выполняются немедленно. 
// Вместо этого они добавляются в очередь микрозадач (microtask queue).

// Очередь микрозадач (Microtask Queue): Эта очередь имеет более высокий приоритет, чем обычная очередь задач (task queue), которая используется,
// например, для setTimeout. После завершения текущего кода (синхронного кода) 
// движок JavaScript сначала выполняет все микрозадачи, а затем переходит к другим задачам.

console.log("Начало");
Promise.resolve().then(() => console.log("Промис 1"));
console.log("Середина");
Promise.resolve().then(() => console.log("Промис 2"));
console.log("Конец");

//Начало
// Середина
// Конец
// Промис 1
// Промис 2


console.log("Начало");
setTimeout(() => console.log("setTimeout 1"), 0);
Promise.resolve().then(() => console.log("Промис 1"));
setTimeout(() => console.log("setTimeout 2"), 0);
Promise.resolve().then(() => console.log("Промис 2"));
console.log("Конец");

// Начало
// Конец
// Промис 1
// Промис 2
// setTimeout 1
// setTimeout 2

